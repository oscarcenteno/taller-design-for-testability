'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by SpecFlow (http://www.specflow.org/).
'     SpecFlow Version:1.9.0.77
'     SpecFlow Generator Version:1.9.0.0
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
#Region "Designer generated code"
'#pragma warning disable
Imports TechTalk.SpecFlow

Namespace Especificaciones.ConfirmarPago
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77"),  _
     System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()>  _
    Partial Public Class ConfirmarUnPagoFeature
        
        Private Shared testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("Confirmar un pago.feature",1)
#End ExternalSource
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()>  _
        Public Shared Sub FeatureSetup(ByVal testContext As Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("es-ES"), "Confirmar un pago", "Reglas al confirmar un pago", ProgrammingLanguage.VB, CType(Nothing,String()))
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()>  _
        Public Shared Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()>  _
        Public Overridable Sub TestInitialize()
            If ((Not (TechTalk.SpecFlow.FeatureContext.Current) Is Nothing)  _
                        AndAlso (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title <> "Confirmar un pago")) Then
                Especificaciones.ConfirmarPago.ConfirmarUnPagoFeature.FeatureSetup(Nothing)
            End If
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioSetup(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioStart(scenarioInfo)
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        Public Overridable Sub SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado(ByVal intencion As String, ByVal estado As String, ByVal seHaNotificado As String, ByVal seConfirma As String, ByVal exampleTags() As String)
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Se puede confirmar si el pago esta autorizado y no se ha notificado", exampleTags)
#ExternalSource("Confirmar un pago.feature",4)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("Confirmar un pago.feature",5)
testRunner.Given(String.Format("un pago en estado ""{0}"" y ""{1}""", estado, seHaNotificado), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Dado ")
#End ExternalSource
#ExternalSource("Confirmar un pago.feature",6)
testRunner.When("se solicita confirmar", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Confirmar un pago.feature",7)
testRunner.Then(String.Format("se confirma ""{0}""", seConfirma), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si el pago esta autorizado y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar un pago"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "el caso basico"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "el caso basico"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "Autorizado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "No"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "Si")>  _
        Public Overridable Sub SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado_ElCasoBasico()
            Me.SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado("el caso basico", "Autorizado", "No", "Si", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si el pago esta autorizado y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar un pago"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "no se confirma varias veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "no se confirma varias veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "Autorizado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "Si"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "No")>  _
        Public Overridable Sub SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado_NoSeConfirmaVariasVeces()
            Me.SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado("no se confirma varias veces", "Autorizado", "Si", "No", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si el pago esta autorizado y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar un pago"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "en proceso no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "en proceso no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "EnProceso"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "No"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "No")>  _
        Public Overridable Sub SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado_EnProcesoNoSeConfirman()
            Me.SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado("en proceso no se confirman", "EnProceso", "No", "No", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si el pago esta autorizado y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar un pago"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "los rechazados no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "los rechazados no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "Rechazado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "Si"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "No")>  _
        Public Overridable Sub SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado_LosRechazadosNoSeConfirman()
            Me.SePuedeConfirmarSiElPagoEstaAutorizadoYNoSeHaNotificado("los rechazados no se confirman", "Rechazado", "Si", "No", CType(Nothing,String()))
        End Sub
    End Class
End Namespace
'#pragma warning restore
#End Region
