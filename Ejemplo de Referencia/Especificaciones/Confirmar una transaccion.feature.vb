'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by SpecFlow (http://www.specflow.org/).
'     SpecFlow Version:1.9.0.77
'     SpecFlow Generator Version:1.9.0.0
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
#Region "Designer generated code"
'#pragma warning disable
Imports TechTalk.SpecFlow

Namespace Especificaciones
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77"),  _
     System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()>  _
    Partial Public Class ConfirmarUnaTransaccionFeature
        
        Private Shared testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("Confirmar una transaccion.feature",1)
#End ExternalSource
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()>  _
        Public Shared Sub FeatureSetup(ByVal testContext As Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("es-ES"), "Confirmar una transaccion", "Se debe poder confirmar solamente las transacciones autorizadas y que no se han n"& _ 
                    "otificado."&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Se debe reintentar las confirmaciones.", ProgrammingLanguage.VB, CType(Nothing,String()))
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()>  _
        Public Shared Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()>  _
        Public Overridable Sub TestInitialize()
            If ((Not (TechTalk.SpecFlow.FeatureContext.Current) Is Nothing)  _
                        AndAlso (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title <> "Confirmar una transaccion")) Then
                Especificaciones.ConfirmarUnaTransaccionFeature.FeatureSetup(Nothing)
            End If
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioSetup(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioStart(scenarioInfo)
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        Public Overridable Sub SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado(ByVal intencion As String, ByVal estado As String, ByVal seHaNotificado As String, ByVal seConfirma As String, ByVal exampleTags() As String)
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Se puede confirmar si la transaccion esta autorizada y no se ha notificado", exampleTags)
#ExternalSource("Confirmar una transaccion.feature",5)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",6)
testRunner.Given(String.Format("una transaccion en estado ""{0}"" y ""{1}""", estado, seHaNotificado), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Dada ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",7)
testRunner.When("se solicita confirmar", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",8)
testRunner.Then(String.Format("se confirma ""{0}""", seConfirma), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si la transaccion esta autorizada y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "el caso basico"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "el caso basico"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "Autorizada"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "No"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "Si")>  _
        Public Overridable Sub SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado_ElCasoBasico()
            Me.SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado("el caso basico", "Autorizada", "No", "Si", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si la transaccion esta autorizada y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "no se confirma varias veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "no se confirma varias veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "Autorizada"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "Si"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "No")>  _
        Public Overridable Sub SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado_NoSeConfirmaVariasVeces()
            Me.SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado("no se confirma varias veces", "Autorizada", "Si", "No", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si la transaccion esta autorizada y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "en proceso no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "en proceso no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "EnProceso"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "No"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "No")>  _
        Public Overridable Sub SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado_EnProcesoNoSeConfirman()
            Me.SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado("en proceso no se confirman", "EnProceso", "No", "No", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se puede confirmar si la transaccion esta autorizada y no se ha notificado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "las rechazadas no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "las rechazadas no se confirman"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:estado", "Rechazada"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se ha notificado", "Si"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:se confirma", "No")>  _
        Public Overridable Sub SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado_LasRechazadasNoSeConfirman()
            Me.SePuedeConfirmarSiLaTransaccionEstaAutorizadaYNoSeHaNotificado("las rechazadas no se confirman", "Rechazada", "Si", "No", CType(Nothing,String()))
        End Sub
        
        Public Overridable Sub SeReintentaHastaTresVeces(ByVal intencion As String, ByVal n As String, ByVal reintentar As String, ByVal exampleTags() As String)
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Se reintenta hasta tres veces", exampleTags)
#ExternalSource("Confirmar una transaccion.feature",17)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",19)
testRunner.Given(String.Format("una transaccion que ha sido intentada ""{0}"" veces", n), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Dada ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",20)
testRunner.And("ha sido autorizada pero no notificada", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Y ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",21)
testRunner.When("se da un error al confirmarla", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",22)
testRunner.Then(String.Format("se puede reintentar ""{0}""", reintentar), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se reintenta hasta tres veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "si nunca se ha reintentado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "si nunca se ha reintentado"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:n", "0"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:reintentar", "Si")>  _
        Public Overridable Sub SeReintentaHastaTresVeces_SiNuncaSeHaReintentado()
            Me.SeReintentaHastaTresVeces("si nunca se ha reintentado", "0", "Si", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se reintenta hasta tres veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "primer reintento"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "primer reintento"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:n", "1"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:reintentar", "Si")>  _
        Public Overridable Sub SeReintentaHastaTresVeces_PrimerReintento()
            Me.SeReintentaHastaTresVeces("primer reintento", "1", "Si", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se reintenta hasta tres veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "segundo reintento"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "segundo reintento"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:n", "2"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:reintentar", "Si")>  _
        Public Overridable Sub SeReintentaHastaTresVeces_SegundoReintento()
            Me.SeReintentaHastaTresVeces("segundo reintento", "2", "Si", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Se reintenta hasta tres veces"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "el maximo no se reintenta"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:intencion", "el maximo no se reintenta"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:n", "3"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:reintentar", "No")>  _
        Public Overridable Sub SeReintentaHastaTresVeces_ElMaximoNoSeReintenta()
            Me.SeReintentaHastaTresVeces("el maximo no se reintenta", "3", "No", CType(Nothing,String()))
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Luego de confirmar, la transaccion está notificada"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Confirmar una transaccion")>  _
        Public Overridable Sub LuegoDeConfirmarLaTransaccionEstaNotificada()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Luego de confirmar, la transaccion está notificada", CType(Nothing,String()))
#ExternalSource("Confirmar una transaccion.feature",31)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",33)
testRunner.Given("una transaccion que no ha sido notificada", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Dada ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",34)
testRunner.And("la fecha es ""2015-06-01 12:00 PM""", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Y ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",35)
testRunner.When("se confirma", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",36)
testRunner.Then("la transaccion se ha notificado", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
#ExternalSource("Confirmar una transaccion.feature",37)
testRunner.And("registra la fecha de la confirmación", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Y ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
    End Class
End Namespace
'#pragma warning restore
#End Region
