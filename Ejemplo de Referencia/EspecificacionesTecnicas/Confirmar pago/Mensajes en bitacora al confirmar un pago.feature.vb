'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by SpecFlow (http://www.specflow.org/).
'     SpecFlow Version:1.9.0.77
'     SpecFlow Generator Version:1.9.0.0
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
#Region "Designer generated code"
'#pragma warning disable
Imports TechTalk.SpecFlow

Namespace EspecificacionesTecnicas.ConfirmarPago
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77"),  _
     System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()>  _
    Partial Public Class MensajesEnBitacoraAlConfirmarUnPagoFeature
        
        Private Shared testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",1)
#End ExternalSource
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()>  _
        Public Shared Sub FeatureSetup(ByVal testContext As Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("es-ES"), "Mensajes en bitacora al confirmar un pago", "", ProgrammingLanguage.VB, CType(Nothing,String()))
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()>  _
        Public Shared Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()>  _
        Public Overridable Sub TestInitialize()
            If ((Not (TechTalk.SpecFlow.FeatureContext.Current) Is Nothing)  _
                        AndAlso (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title <> "Mensajes en bitacora al confirmar un pago")) Then
                EspecificacionesTecnicas.ConfirmarPago.MensajesEnBitacoraAlConfirmarUnPagoFeature.FeatureSetup(Nothing)
            End If
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioSetup(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioStart(scenarioInfo)
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cuando se confirma una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Mensajes en bitacora al confirmar un pago")>  _
        Public Overridable Sub CuandoSeConfirmaUnaTransaccion()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Cuando se confirma una transaccion", CType(Nothing,String()))
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",3)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
            Dim table1 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"Propiedad", "Valor"})
            table1.AddRow(New String() {"Codigo de referencia", "Ref1"})
            table1.AddRow(New String() {"Codigo de Entidad Origen", "401"})
            table1.AddRow(New String() {"Codigo de Moneda Destino", "1"})
            table1.AddRow(New String() {"Numero de Telefono Destino", "60607070"})
            table1.AddRow(New String() {"Codigo de Entidad Destino", "501"})
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",5)
testRunner.Given("un pago", CType(Nothing,String), table1, "Dado ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",12)
testRunner.When("se confirma", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",13)
testRunner.Then("este será el mensaje ""Se confirmó el pago con referencia [Ref1] de la entidad ori"& _ 
                    "gen [401], en moneda [1] hacia el teléfono [60607070] asociado a la entidad dest"& _ 
                    "ino [501]""", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cuando no es permitido confirmar una transaccion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Mensajes en bitacora al confirmar un pago")>  _
        Public Overridable Sub CuandoNoEsPermitidoConfirmarUnaTransaccion()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Cuando no es permitido confirmar una transaccion", CType(Nothing,String()))
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",15)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
            Dim table2 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"Propiedad", "Valor"})
            table2.AddRow(New String() {"Codigo de referencia", "Ref1"})
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",16)
testRunner.Given("un pago", CType(Nothing,String), table2, "Dado ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",19)
testRunner.When("se intenta confirmar pero no es permitido", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",20)
testRunner.Then("este será el mensaje ""No se confirmó el pago con Cod. Referencia [Ref1] pues debe"& _ 
                    " estar autorizado y no notificado.""", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cuando no se puede invocar a la entidad por parametros invalidos"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Mensajes en bitacora al confirmar un pago")>  _
        Public Overridable Sub CuandoNoSePuedeInvocarALaEntidadPorParametrosInvalidos()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Cuando no se puede invocar a la entidad por parametros invalidos", CType(Nothing,String()))
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",22)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
            Dim table3 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"Propiedad", "Valor"})
            table3.AddRow(New String() {"Codigo de referencia", "Ref1"})
            table3.AddRow(New String() {"Codigo de Entidad Destino", "501"})
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",23)
testRunner.Given("un pago", CType(Nothing,String), table3, "Dado ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",27)
testRunner.When("no se tiene los parametros necesarios para invocar a la entidad", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",28)
testRunner.Then("este será el mensaje ""No se confirmó el pago Ref1 pues los parametros requeridos "& _ 
                    "para invocar a la entidad 501 no están configurados""", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cuando se reintenta la confirmacion"),  _
         Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Mensajes en bitacora al confirmar un pago")>  _
        Public Overridable Sub CuandoSeReintentaLaConfirmacion()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Cuando se reintenta la confirmacion", CType(Nothing,String()))
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",30)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
            Dim table4 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"Propiedad", "Valor"})
            table4.AddRow(New String() {"Codigo de referencia", "Ref1"})
            table4.AddRow(New String() {"Fecha de inicio", "15-06-2015 9:00:00"})
            table4.AddRow(New String() {"Numero de reintento", "3"})
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",31)
testRunner.Given("un reintento de confirmacion", CType(Nothing,String), table4, "Dada ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",36)
testRunner.When("se registra en bitacora", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Cuando ")
#End ExternalSource
#ExternalSource("Mensajes en bitacora al confirmar un pago.feature",37)
testRunner.Then("este será el mensaje ""Se ha calendarizado el reintento para confirmar #3 para el "& _ 
                    "pago con referencia Ref1 en la fecha/hora 15/06/2015 9:00:00.""", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Entonces ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
    End Class
End Namespace
'#pragma warning restore
#End Region
